import express from 'express';
import { body, validationResult } from 'express-validator';
import pool from '../config/database.js';
import { sendSMSCode, generateSMSCode } from '../services/smsService.js';
import { generateToken } from '../middleware/auth.js';
import { normalizePhone, isValidPhone } from '../utils/phoneValidator.js';

const router = express.Router();

/**
 * POST /api/auth/send-code
 * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
router.post(
  '/send-code',
  [
    body('phone')
      .notEmpty()
      .withMessage('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
      .custom((value) => {
        const cleaned = value.replace(/\D/g, '');
        if (cleaned.length < 10 || cleaned.length > 11) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }
        return true;
      }),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ 
          error: errors.array()[0].msg,
          errors: errors.array() 
        });
      }

      const { phone } = req.body;
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formattedPhone = normalizePhone(phone);
      
      if (!formattedPhone) {
        return res.status(400).json({ 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +79991234567, 89991234567 –∏–ª–∏ 79991234567' 
        });
      }

      console.log(`üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –¥–ª—è: ${formattedPhone}`);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
      const code = generateSMSCode();
      const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –ë–î
      try {
        await pool.query(
          `INSERT INTO sms_codes (phone, code, expires_at) 
           VALUES ($1, $2, $3)`,
          [formattedPhone, code, expiresAt]
        );
        console.log(`‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è ${formattedPhone}`);
      } catch (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –ë–î:', dbError);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.' });
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
      await sendSMSCode(formattedPhone, code);

      res.json({
        success: true,
        message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        phone: formattedPhone,
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }
);

/**
 * POST /api/auth/verify-code
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 */
router.post(
  '/verify-code',
  [
    body('phone').notEmpty().withMessage('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('code').isLength({ min: 6, max: 6 }).withMessage('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä').isNumeric().withMessage('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ 
          error: errors.array()[0].msg,
          errors: errors.array() 
        });
      }

      const { phone, code } = req.body;
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formattedPhone = normalizePhone(phone);
      
      if (!formattedPhone) {
        return res.status(400).json({ 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' 
        });
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è: ${formattedPhone}, –∫–æ–¥: ${code}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
      const codeResult = await pool.query(
        `SELECT * FROM sms_codes 
         WHERE phone = $1 AND code = $2 AND expires_at > NOW() AND used = false
         ORDER BY created_at DESC LIMIT 1`,
        [formattedPhone, code]
      );

      if (codeResult.rows.length === 0) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥' });
      }

      // –û—Ç–º–µ—Ç–∫–∞ –∫–æ–¥–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
      await pool.query(
        `UPDATE sms_codes SET used = true WHERE id = $1`,
        [codeResult.rows[0].id]
      );

      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await pool.query(
        `SELECT * FROM users WHERE phone = $1`,
        [formattedPhone]
      );

      let userId;

      if (userResult.rows.length === 0) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        return res.json({
          success: true,
          requiresRegistration: true,
          phone: formattedPhone,
          message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.',
        });
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        userId = userResult.rows[0].id;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await pool.query(
          `UPDATE users SET phone_verified = true WHERE id = $1`,
          [userId]
        );

        const token = generateToken(userId);

        res.json({
          success: true,
          requiresRegistration: false,
          token,
          user: {
            id: userResult.rows[0].id,
            phone: userResult.rows[0].phone,
            firstName: userResult.rows[0].first_name,
            lastName: userResult.rows[0].last_name,
            email: userResult.rows[0].email,
          },
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞' });
    }
  }
);

/**
 * POST /api/auth/register
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post(
  '/register',
  [
    body('phone').notEmpty().withMessage('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    body('code').isLength({ min: 6, max: 6 }).withMessage('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä').isNumeric(),
    body('firstName').trim().isLength({ min: 2, max: 100 }).withMessage('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('lastName').trim().isLength({ min: 2, max: 100 }).withMessage('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('email').optional({ nullable: true, checkFalsy: true }).isEmail().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
    body('age').optional({ nullable: true }).isInt({ min: 14, max: 120 }).withMessage('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 120'),
    body('gender').optional({ nullable: true }).isIn(['male', 'female', 'other']).withMessage('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞'),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ 
          error: errors.array()[0].msg,
          errors: errors.array() 
        });
      }

      const { phone, code, firstName, lastName, middleName, email, age, gender } = req.body;
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formattedPhone = normalizePhone(phone);
      
      if (!formattedPhone) {
        return res.status(400).json({ 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' 
        });
      }

      console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${formattedPhone}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –µ—â–µ —Ä–∞–∑
      const codeResult = await pool.query(
        `SELECT * FROM sms_codes 
         WHERE phone = $1 AND code = $2 AND expires_at > NOW() AND used = false
         ORDER BY created_at DESC LIMIT 1`,
        [formattedPhone, code]
      );

      if (codeResult.rows.length === 0) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      const existingUser = await pool.query(
        `SELECT * FROM users WHERE phone = $1`,
        [formattedPhone]
      );

      if (existingUser.rows.length > 0) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await pool.query(
        `INSERT INTO users (phone, phone_verified, first_name, last_name, middle_name, email, age, gender)
         VALUES ($1, true, $2, $3, $4, $5, $6, $7)
         RETURNING id, phone, first_name, last_name, email`,
        [formattedPhone, firstName, lastName, middleName || null, email || null, age || null, gender || null]
      );

      // –û—Ç–º–µ—Ç–∫–∞ –∫–æ–¥–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
      await pool.query(
        `UPDATE sms_codes SET used = true WHERE id = $1`,
        [codeResult.rows[0].id]
      );

      const user = userResult.rows[0];
      const token = generateToken(user.id);

      res.status(201).json({
        success: true,
        token,
        user: {
          id: user.id,
          phone: user.phone,
          firstName: user.first_name,
          lastName: user.last_name,
          email: user.email,
        },
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }
  }
);

export default router;

